-Xlint:ignore,error,warning will set the level for all Xlint warnings. -Xlint, alone, is an abbreviation for
     -Xlint:warning.

     The -Xlintfile:lint.properties allows fine-grained control. In tools.jar, see
     org/aspectj/weaver/XlintDefault.properties for the default behavior and a template to copy. 
### AspectJ-specific messages
configure.version = AspectJ Compiler 1.1
configure.directoryNotExist = invalid option or directory does not exist: {0}
## 3456789012345678901234567890123456789012345678901234567890123456789012345
### miscellaneous
misc.usage = AspectJ Compiler 1.1\n\
\n\
\tUsage: <options> <source files | directories>\n\
\n\
AspectJ-specific options:\n\
\t-injars <jarList>   use classes in <jarList> zip files as source\n\
\t                    (<jarList> uses classpath delimiter)\n\
\t-aspectpath <list>  weave aspects from <list> zip files into sources\n\
\t                    (<list> uses classpath delimiter)\n\
\t-outjar <file>      put output classes in zip file <file>\n\
\t-argfile <file>     specify line-delimited list of source files\n\
\t-incremental        continuously-running compiler, needs -sourceroots\n\
\t                    (reads stdin: enter to recompile and ''q'' to quit)\n\
\t-sourceroots <dirs> compile all .aj and .java files in <dirs>\n\
\t                    (<dirs> uses classpath delimiter)\n\
\t-emacssym           generate .ajesym symbol files for emacs support\n\
\t-Xlint              same as ''-Xlint:warning''\n\
\t-Xlint:<level>      set default level for crosscutting messages\n\
\t                    (<level> may be ignore, warning, or error)\n\
\t-Xlintfile <file>   specify properties file to set per-message levels\n\
\t                    (cf org/aspectj/weaver/XlintDefault.properties)\n\
\n\
Standard Eclipse compiler options:\n\
\t-help               emit this help message and quit\n\
\t-version            emit compiler version number and quit\n\
\t-classpath <list>   directories and zip files for the classpath\n\
\t                    (<list> uses platform-specific path delimiter)\n\
\t-bootclasspath <list> override bootclasspath for finding compile types\n\
\t                    (<list> uses platform-specific path delimiter)\n\
\t-extdirs <list>     override extension dirs for finding compile types\n\
\t                    (<list> uses platform-specific path delimiter)\n\
\t-d <dir>            destination directory for output classes \n\
\t-target <ver>       classfile setting (1.1 or 1.2, default is 1.1)\n\
\t-1.3                set compliance level to 1.3 (default)\n\
\t-1.4                set compliance level to 1.4\n\
\t-source <ver>       assertions toggle (1.3 or 1.4, default is 1.3\n\
\t                    in -1.3 mode and 1.4 in -1.4 mode)\n\
\t-nowarn             emit no warnings (same as ''-warn:none'')\n\
\t-warn:<list>        emit warnings specified by comma-delimited list\n\
\t                    (eg ''-warn:unusedLocals,deprecation'')\n\
\t  constructorName       method with constructor name\n\
\t  packageDefaultMethod  attempt to override package-default method\n\
\t  deprecation           usage of deprecated type or member\n\
\t  maskedCatchBlocks     hidden catch block\n\
\t  unusedLocals          unused local variable (never read)\n\
\t  unusedArguments       unused method argument (never read)\n\
\t  unusedImports         unused imports\n\
\t  syntheticAccess       performing synthetic access for inner classes\n\
\t  assertIdentifier      ''assert'' used as identifier\n\
\t-deprecation        same as ''-warn:deprecation''\n\
\t-noImportError      emit no errors for unresolved imports\n\
\t-proceedOnError     keep compiling after errors, dumping class files\n\
\t                    with problem methods\n\
\t-g[:<level>]        debug attributes level\n\
\t	-g                  all debug info (same as ''-g:lines,vars,source'')\n\
\t	-g:none             no debug info\n\
\t	-g:<items>          debug info for any/all of [lines, vars, source]\n\
\t-preserveAllLocals  code gen preserve all local variables (for debug)\n\
\t-referenceInfo      compute reference info\n\
\t-encoding <name>    specify default source encoding format\n\
\t                    (Specify encoding for any source file/folder by\n\
\t                    suffixing each input name with '[encoding]')\n\
\t-verbose            emit accessed/processed compilation units \n\
\t-log <filename>     specify a log file for compile messages\n\
\t-progress           show progress (requires -log mode)\n\
\t-time               display speed information\n\
\t-noExit             do not call System.exit(n) at end of compilation\n\
\t                    (n=0 if no error)\n\
\t-repeat <n>         repeat compilation process <n> times (perf analysis)\n

## options not documented above (per ..ajdt.ajc.BuildArgParser.java):
# -XincrementalFile, -XnoWeave, -XserializableAspects, -XnoInline

##########################################
### JavaBatchCompiler messages.

### compiler version id
compiler.version = 0.265
### scanning
scanning.start = Collecting source files inside {0}

### progress
progress.compiling = Compiling

### compile
compile.repetition = Repetition {0}/{1}
compile.instantTime = Compiled {0} lines in {1} ms ({2} lines/s)
compile.totalTime = Total compilation time: {0}
compile.oneProblem = 1 problem
compile.severalProblems = {0} problems
compile.oneError = 1 error
compile.severalErrors = {0} errors
compile.oneWarning = 1 warning
compile.severalWarnings = {0} warnings
compile.oneClassFileGenerated = 1 .class file generated
compile.severalClassFilesGenerated = {0} .class files generated

### configure
configure.noSourceFile = no source file specified
configure.duplicateLog = duplicate log specification: {0}
configure.duplicateRepeat = duplicate repeat specification: {0}
configure.duplicateCompliance = duplicate compliance setting specification: {0}
configure.source = invalid source option, source is either ''1.3'' or ''1.4'': {0}
configure.jck = invalid jck option, jck compliance level is either ''1.3'' or ''1.4'': {0}
configure.duplicateOutputPath = duplicate output path specification: {0}
configure.duplicateClasspath = duplicate classpath specification: {0}
configure.invalidDebugOption = invalid debug option: {0}
configure.duplicateWarningConfiguration = duplicate usage of warning configuration
configure.invalidWarningConfiguration = invalid warning configuration: {0}
configure.invalidWarning = invalid warning: {0}
configure.invalidWarningOption = invalid warning option: {0}
configure.targetJDK = target JDK should be comprised in between ''1.1'' and ''1.4'': {0}
configure.incompatibleTargetForSource14 = ''1.4'' source mode requires ''-target 1.4'' : {0}
configure.incompatibleComplianceForSource14 = ''1.4'' source mode requires ''-1.4'' compliance mode: {0}
configure.incompatibleComplianceForTarget14 = ''1.4'' target mode requires ''-1.4'' compliance mode: {0}
configure.repetition = repetition must be a positive integer: {0}
configure.IOError = i/o error : unable to retrieve .JAVA files in directory: {0}
configure.noClasspath = 
configure.incorrectClasspath = incorrect classpath: {0}
configure.noSource = no source file specified
configure.cannotOpenLog = cannot open .log file
configure.unexpectedCustomEncoding = unexpected custom encoding specification: {0}[{1}]
configure.unsupportedEncoding = unsupported encoding format: {0}
configure.duplicateDefaultEncoding = duplicate default encoding format specification: {0}

### requestor
requestor.error = ERROR
requestor.warning = WARNING
requestor.in = in {0}
requestor.notRetrieveErrorMessage = Cannot retrieve the error message for {0}

### unit
unit.more = File {0} is specified more than once
unit.missing = File {0} is missing

### output
output.noClassFileCreated = No .class file created for file named {0} because of an IOException.
