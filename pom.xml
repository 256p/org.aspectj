<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.aspectj</groupId>
	<artifactId>aspectj-parent</artifactId>
	<packaging>pom</packaging>
	<version>1.9.7.BUILD-SNAPSHOT</version>
	<name>AspectJ Parent Project</name>

	<properties>
		<!-- TODO: Do we still need this? -->
		<revision>1.9.7.BUILD-SNAPSHOT</revision>
		<!-- Basic build properties -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- By default, do not deploy artifacts - override for the ones which actually should be deployed -->
		<maven.deploy.skip>true</maven.deploy.skip>
		<!-- Dependency versions -->
		<jdt.core.version>3.25.0-SNAPSHOT</jdt.core.version>
		<asm.version>9.1</asm.version>
		<lib.ant.version>1.6.3</lib.ant.version>
		<lib.ant.xerces.version>2.6.2</lib.ant.xerces.version>
		<lib.regexp.version>1.2</lib.regexp.version>
		<lib.commons.beanutils.version>1.4</lib.commons.beanutils.version>
		<lib.commons.beanutils.tag>BEANUTILS_1_4</lib.commons.beanutils.tag>
		<lib.commons.collections.version>2.0</lib.commons.collections.version>
		<lib.commons.collections.tag>collections-2.0</lib.commons.collections.tag>
		<lib.commons.digester.version>1.3</lib.commons.digester.version>
		<lib.commons.digester.tag>DIGESTER_1_3</lib.commons.digester.tag>
		<lib.commons.logging.version>1.0.1</lib.commons.logging.version>
		<lib.commons.logging.tag>LOGGING_1_0_1</lib.commons.logging.tag>
	</properties>

	<distributionManagement>
		<repository>
			<id>aspectj-dev-deploy</id>
			<name>AspectJ.dev WebDAV Releases</name>
			<!-- Please specify the local mount point for the WebDAV share in your settings.xml -->
			<url>${aspectj.dev.webdav.share}</url>
			<uniqueVersion>false</uniqueVersion>
		</repository>
		<snapshotRepository>
			<id>aspectj-dev-deploy</id>
			<name>AspectJ.dev WebDAV Snapshots</name>
			<!-- Please specify the local mount point for the WebDAV share in your settings.xml -->
			<url>${aspectj.dev.webdav.share}</url>
			<uniqueVersion>true</uniqueVersion>
		</snapshotRepository>
	</distributionManagement>

	<repositories>
		<!--
      Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
      Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
      in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
      https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
    -->
		<repository>
			<id>central</id>
			<name>Central Repository</name>
			<url>https://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</repository>
		<repository>
			<id>aspectj-dev</id>
			<name>AspectJ artifacts on aspectj.dev</name>
			<url>https://aspectj.dev/maven</url>
			<layout>default</layout>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</repository>
	</repositories>

	<pluginRepositories>
		<!--
      Repeat Central definition from super POM https://maven.apache.org/ref/3.6.3/maven-model-builder/super-pom.html.
      Define it as the first repository to search at, otherwise Maven would always search any other repositories defined
      in the POM or in settings.xml first, slowing down the build, because most artifacts reside at Maven Central. See
      https://maven.apache.org/guides/mini/guide-multiple-repositories.html#repository-order for more details.
    -->
		<pluginRepository>
			<id>central</id>
			<name>Central Repository</name>
			<url>https://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</pluginRepository>
		<pluginRepository>
			<id>aspectj-dev</id>
			<name>AspectJ artifacts on aspectj.dev</name>
			<url>https://aspectj.dev/maven</url>
			<layout>default</layout>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</pluginRepository>
	</pluginRepositories>

	<modules>
		<module>lib</module>
		<module>util</module>
		<module>bridge</module>
		<module>testing-util</module>
		<module>org.aspectj.matcher</module>
		<module>asm</module>
		<module>testing-client</module>
		<module>ajbrowser</module>
		<module>runtime</module>
		<module>bcel-builder</module>
		<module>weaver</module>
		<module>loadtime</module>
		<module>org.aspectj.ajdt.core</module>
		<module>ajde.core</module>
		<module>ajde</module>
		<module>ajdoc</module>
		<module>taskdefs</module>
		<module>testing</module>
		<module>testing-drivers</module>
		<module>tests</module>
		<module>build</module>
		<module>run-all-junit-tests</module>
		<module>docs</module>

		<!-- FYI: These are NOT meant to be sub-modules but a stand-alone projects built and deployed independently. -->
		<!--
		<module>asm-renamed</module>
		-->

		<!-- create the important artifacts we care about -->
		<module>aspectjrt</module>
		<module>aspectjweaver</module>
		<module>aspectjtools</module>
		<module>aspectjmatcher</module>

		<!-- build the java -jar'able installer -->
		<module>installer</module>
	</modules>

	<!--
    Caveat: Automatic, JDK-based profile activation can *not* be inherited by child POMs defining
    the same profiles. Thus, we have to repeat activation conditions there.

    Note: We can check if automatic profile activation works via mvn help:active-profiles.
  -->
	<profiles>
		<profile>
			<id>jdk-8-to-15</id>
			<activation>
				<jdk>[1.8,16)</jdk>
			</activation>
			<properties>
				<jvm.arg.addOpens/>
			</properties>
		</profile>
		<profile>
			<id>jdk-16-to-xx</id>
			<activation>
				<jdk>[16,)</jdk>
			</activation>
			<properties>
				<jvm.arg.addOpens>--add-opens java.base/java.lang=ALL-UNNAMED</jvm.arg.addOpens>
			</properties>
		</profile>
	</profiles>

	<build>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.22.2</version>
					<configuration>
						<!--<testFailureIgnore>true</testFailureIgnore>-->
						<argLine>${jvm.arg.addOpens}</argLine>
						<excludes>
							<exclude>**/*ModuleTests.java</exclude>
						</excludes>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-help-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>3.2.0</version>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>package</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<version>3.2.0</version>
					<configuration>
						<archive>
							<addMavenDescriptor>false</addMavenDescriptor>
						</archive>
					</configuration>
					<executions>
						<execution>
							<id>test-jar</id>
							<goals>
								<goal>test-jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<!-- TODO: upgrade after https://issues.apache.org/jira/browse/MSHADE-366 is fixed -->
					<version>3.2.4</version>
					<configuration>
						<createSourcesJar>true</createSourcesJar>
						<createDependencyReducedPom>false</createDependencyReducedPom>
						<shadedArtifactAttached>false</shadedArtifactAttached>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>3.0.0-M3</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.2.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>3.1.0</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>3.1.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>3.1.1</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>flatten-maven-plugin</artifactId>
					<version>1.2.2</version>
				</plugin>
			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<filesets>
						<fileset>
							<directory>.</directory>
							<includes>
								<!-- AspectJ core dumps -->
								<include>**/ajcore.*.txt</include>
								<!-- Test temp-dirs in 'weaver' module, see AsynchronousFileCacheBackingTestSupport.getCacheDir -->
								<include>**/dir-0.*/**</include>
							</includes>
							<followSymlinks>false</followSymlinks>
						</fileset>
						<fileset>
							<directory>aj-build</directory>
							<followSymlinks>false</followSymlinks>
						</fileset>
					</filesets>
				</configuration>
			</plugin>

			<!--
				This plugin is nice to have in the POM, because then it is easy to double-click a goal such as 'effective-pom',
				'active-profiles', 'effective-settings' or 'evaluate' from a modern IDE in order to get quick information about
				the current build configuration for any given module.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-help-plugin</artifactId>
			</plugin>

			<!--
				This plugin is nice to have in the POM, because then it is easy to double-click a goal such as 'analyze' or
				'tree' from a modern IDE in order to inspect dependency management in the project.

				Tip: If you want a quick overview, run this from the project from the project root directory:
				mvn -P \!create-docs dependency:analyze | grep -E '\[(WARNING|INFO\] -+< .+:.+ >-+)' > dependency-analyze.txt
				But be careful that all modules are actually listed - usually 'org.aspectj:installer' is the last one in the
				list. You can make sure by running the command without 'grep' first, then you see if there are any compile
				problems which 'grep' would filter out.
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<configuration>
					<ignoredUnusedDeclaredDependencies>
						<!-- Declared in parent POM for convenience, but not used in every module -->
						<ignoredUnusedDeclaredDependency>junit:junit:jar</ignoredUnusedDeclaredDependency>
						<ignoredUnusedDeclaredDependency>org.aspectj:lib:jar</ignoredUnusedDeclaredDependency>
					</ignoredUnusedDeclaredDependencies>
				</configuration>
			</plugin>

		</plugins>

	</build>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.junit</groupId>
				<artifactId>junit-bom</artifactId>
				<version>5.7.1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>4.13.2</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>org.eclipse.jdt.core</artifactId>
				<version>${jdt.core.version}</version>
			</dependency>
			<dependency>
				<!-- Because commons-digester:commons-digester:1.3 refers to version 1.4-dev -->
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>${lib.commons.beanutils.version}</version>
			</dependency>
			<dependency>
				<groupId>org.ow2.asm</groupId>
				<artifactId>asm</artifactId>
				<version>${asm.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>asm-renamed</artifactId>
				<version>${asm.version}</version>
			</dependency>
			<dependency>
				<!-- All modules referencing files inside 'lib' need this dependency -->
				<groupId>org.aspectj</groupId>
				<artifactId>lib</artifactId>
				<version>${project.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<!--
			Actually, it would be cleaner to only define JUnit only it modules which actually use it. But since this comprises
			the majority, we can afford to be a little bit unclean here with regard to dependency management.
		-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>
