<?xml version="1.0"?>
<project name="tests" default="all" basedir=".">

    <import file="../build/build-common.xml"/>
    <import file="../ajde/build.xml"/>
    <import file="../asm/build.xml"/>
    <import file="../bridge/build.xml"/>
    <import file="../testing/build.xml"/>
    <import file="../testing-drivers/build.xml"/>
    <import file="../org.aspectj.ajdt.core/build.xml"/>

    <path id="tests.test.src.path">
        <!-- all are for test run -->
        <path refid="tests.src.path"/>
        <pathelement path="../runtime/bin"/>
        <pathelement path="../org.aspectj.ajdt.core/bin"/>
        <pathelement path="../weaver/bin"/>
        <fileset dir="${basedir}/../lib">
            <include name="junit/*.jar"/>
            <include name="commons/*.jar"/>
        </fileset>
        <fileset dir="${basedir}/../org.eclipse.jdt.core">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="tests.src.path">
        <pathelement path="../ajde/bin"/>
        <pathelement path="../asm/bin"/>
        <pathelement path="../bridge/bin"/>
        <pathelement path="../org.aspectj.ajdt.core/bintest"/>
        <pathelement path="../testing/bin"/>
        <pathelement path="../testing-drivers/bin"/>
        <pathelement path="../util/bin"/>
        <fileset dir="${basedir}/../lib">
            <include name="bcel/*.jar"/>
        </fileset>
    </path>

    <target name="compile" depends="init,
                                    ajde.compile,
                                    asm.compile,
                                    bridge.compile,
                                    org.aspectj.ajdt.core.compile,
                                    testing.compile,
                                    testing-drivers.compile,
                                    testing-util.compile,
                                    weaver.compile">
        <!-- we cannot use dependancies on any xxx.test:compile since it refers back xxx.compile that Ants
             interprets as this.compile due to <import directives, thus circular -->
        <testcompile project="weaver" path="weaver.test.src.path"/>
        <testcompile project="org.aspectj.ajdt.core" path="org.aspectj.ajdt.core.test.src.path"/>
        <srccompile project="tests" path="tests.src.path"/>
    </target>

    <target name="test:compile" depends="compile">
        <!-- no testsrc here (all should actually be a testsrc to ease Ant import things..) -->
    </target>

    <target name="test" depends="test:compile,
                                 runtime.compile,
                                 weaver.compile,
                                 tests.test.jdk13,
                                 tests.test.jdk14,
                                 tests.test.jdk15">
        <!-- Note: AllTests15 does run Java 1.3 and 1.4 test and so on -->
    </target>

    <!-- local target since macro does not support "if" -->
    <!-- FIXME remove macro usage here to use vmarg for -Dorg.aspectj.tools.ajc.Ajc.verbose=true support
         since it helps when test fails -->
    <target name="tests.test.jdk15" if="jdk15">
        <testrun project="tests" path="tests.test.src.path" suite="org.aspectj.systemtest.AllTests15"/>
    </target>
    <target name="tests.test.jdk14" if="jdk14">
        <testrun project="tests" path="tests.test.src.path" suite="org.aspectj.systemtest.AllTests14"/>
    </target>
    <target name="tests.test.jdk13" if="jdk13">
        <testrun project="tests" path="tests.test.src.path" suite="org.aspectj.systemtest.AllTests"/>
    </target>

    <!-- run a single test with "ant -Dtest=org.aspectj.systemtest.AllTests15 atest" -->
    <target name="atest" depends="test:compile,
                                 runtime.compile,
                                 weaver.compile">
        <junit showoutput="on" fork="on" haltonfailure="on" haltonerror="on" printsummary="on">
            <classpath>
                <pathelement path="../tests/bin"/>
                <pathelement path="../tests/bintest"/>
                <path refid="tests.test.src.path"/>
            </classpath>
            <test name="${test}"/>
        </junit>
    </target>

</project>

