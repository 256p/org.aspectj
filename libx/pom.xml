<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.aspectj</groupId>
    <artifactId>aspectj-parent</artifactId>
    <version>1.9.7.BUILD-SNAPSHOT</version>
  </parent>

  <artifactId>libx</artifactId>

  <properties>
    <lib.ant.name>apache-ant</lib.ant.name>
    <lib.ant.artifact>${lib.ant.name}-${lib.ant.version}</lib.ant.artifact>
  </properties>

  <build>
    <plugins>

      <plugin>
        <groupId>com.googlecode.maven-download-plugin</groupId>
        <artifactId>download-maven-plugin</artifactId>
        <version>1.6.1</version>
        <executions>
          <execution>
            <id>download-ant-binaries</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <configuration>
              <url>https://archive.apache.org/dist/ant/binaries/${lib.ant.artifact}-bin.zip</url>
              <outputDirectory>ant</outputDirectory>
              <sha1>3fa9f816a0c4c63249efad8e6225f2e83794f0c0</sha1>
            </configuration>
          </execution>
          <execution>
            <id>download-ant-sources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <configuration>
              <url>https://archive.apache.org/dist/ant/source/${lib.ant.artifact}-src.zip</url>
              <outputDirectory>ant</outputDirectory>
              <sha1>b9f3c8c31bb6c9069ad5b655059a17769af12f20</sha1>
            </configuration>
          </execution>
          <execution>
            <id>download-beanutils-sources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <configuration>
              <url>https://github.com/apache/commons-beanutils/archive/refs/tags/BEANUTILS_1_4.zip</url>
              <outputDirectory>commons</outputDirectory>
              <outputFileName>commons-beanutils-1.4-sources.jar</outputFileName>
              <sha1>b2c02afe7e6475cd7c811932b8415d171a8afa00</sha1>
            </configuration>
          </execution>
          <execution>
            <id>download-collections-sources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <configuration>
              <url>https://github.com/apache/commons-collections/archive/refs/tags/collections-2.0.zip</url>
              <outputDirectory>commons</outputDirectory>
              <outputFileName>commons-collections-2.0-sources.jar</outputFileName>
              <sha1>824cacd0aafe21a94fb142388fd62f28a12df5ef</sha1>
            </configuration>
          </execution>
          <execution>
            <id>download-digester-sources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <configuration>
              <url>https://github.com/apache/commons-digester/archive/refs/tags/DIGESTER_1_3.zip</url>
              <outputDirectory>commons</outputDirectory>
              <outputFileName>commons-digester-1.3-sources.jar</outputFileName>
              <sha1>49f653c7ea726301c564f9662b72c051fee9390a</sha1>
            </configuration>
          </execution>
          <execution>
            <id>download-logging-sources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>wget</goal>
            </goals>
            <configuration>
              <url>https://github.com/apache/commons-logging/archive/refs/tags/LOGGING_1_0_1.zip</url>
              <outputDirectory>commons</outputDirectory>
              <outputFileName>commons-logging-1.0.1-sources.jar</outputFileName>
              <sha1>c61a373f6d50ff8fcfba900934f7254d44f9735b</sha1>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.1.2</version>
        <executions>
          <execution>
            <id>copy</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>

                <!--
                  How relevant is JRockit in 2021?
                  https://en.wikipedia.org/wiki/JRockit
                  https://www.oracle.com/java/jrockit.html

                  There are only org.aspectj.weaver.loadtime.JRockitAgent + tests. If we would get rid of that class,
                  all the rest and jrockit.jar could also go away.
                -->

                <artifactItem>
                  <!-- Binary is identical to committed version in branch 'jdtcore-new' -->
                  <groupId>com.googlecode.jarjar</groupId>
                  <artifactId>jarjar</artifactId>
                  <version>1.3</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>jarjar</outputDirectory>
                  <destFileName>jarjar-1.3.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!--
                    Binary jdiff:jdiff:1.0.9 is available on Maven Central, but different from committed version.
                    There are API changes, some classes referenced in org.aspectj.testing.util.TestUtil are unavailable.
                    Therefore, we would have to try and port the existing functionality, making sure the tests still
                    run.

                    Downloading snapshot from
                    https://sourceforge.net/p/jedit/svn/24818/tree/plugins/JDiffPlugin/tags/jdiffplugin-1_2_2/jdiff/
                    produces exactly identical source files as in the committed JAR. But there is no corresponding Maven
                    artifact or even binary download package. We would have to compile the code within AspectJ and
                    deploy it locally or Sonatype (Maven Central) or maven.springframework.org.

                    Downloading source or binary packages from
                    https://sourceforge.net/projects/jedit-plugins/files/JDiffPlugin/1.3/
                    also has identical source files (except for tiny copyright changes), but contains more classes
                    (a superset of the committed ones). Again, there is no Maven artifact for it.

                    Another option would be to include the only 4 Java classes into the 'testing-util' source tree. They
                    are only used from there and could easily be compiled together with the module, package names
                    relocated or not.
                  -->
                  <!-- TODO: In commit c89830fe jdiff.jar was accidentally unpacked + committed -> delete -->
                  <groupId>jdiff</groupId>
                  <artifactId>jdiff</artifactId>
                  <version>1.0.9</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>jdiff</outputDirectory>
                  <destFileName>jdiff.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <groupId>junit</groupId>
                  <artifactId>junit</artifactId>
                  <version>3.8.1</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>junit</outputDirectory>
                  <destFileName>junit.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <!-- TODO: Is this redundant JUnit JAR in ant/lib really necessary? If so, why? -->
                  <groupId>junit</groupId>
                  <artifactId>junit</artifactId>
                  <version>3.8.1</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>ant/lib</outputDirectory>
                  <destFileName>junit.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <groupId>junit</groupId>
                  <artifactId>junit</artifactId>
                  <version>3.8.1</version>
                  <type>jar</type>
                  <classifier>sources</classifier>
                  <overWrite>false</overWrite>
                  <outputDirectory>junit</outputDirectory>
                  <destFileName>junit-src.zip</destFileName>
                </artifactItem>

                <!-- Jython does not seem to be used anywhere in AspectJ -->

                <artifactItem>
                  <!-- Binary is a bit newer than committed version, but produces identical results in 'docs' -->
                  <groupId>saxon</groupId>
                  <artifactId>saxon</artifactId>
                  <version>6.5.3</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>saxon</outputDirectory>
                  <destFileName>saxon.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <groupId>regexp</groupId>
                  <artifactId>regexp</artifactId>
                  <version>${lib.regexp.version}</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>regexp</outputDirectory>
                  <destFileName>jakarta-regexp-1.2.jar</destFileName>
                </artifactItem>

                <!--
                  About commons.jar + commons-src.zip:
                    - Beanutils Binaries are commons-beanutils:commons-beanutils:1.4 (no sources on Maven Central, but
                      https://github.com/apache/commons-beanutils/archive/refs/tags/BEANUTILS_1_4.zip)
                    - Collections: Binaries are commons-collections:commons-collections:2.0 (no sources on Maven Central, but
                      https://github.com/apache/commons-collections/archive/refs/tags/collections-2.0.zip)
                    - Digester: Binaries are commons-digester:commons-digester:1.3 (no sources on Maven Central, but
                      https://github.com/apache/commons-digester/archive/refs/tags/DIGESTER_1_3.zip)
                    - Logging: Binaries are commons-logging:commons-logging:1.0.1 (no sources on Maven Central, but
                      https://github.com/apache/commons-logging/archive/refs/tags/LOGGING_1_0_1.zip)
                -->
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <!-- TODO: not used anywhere -> remove -->
                  <groupId>commons-beanutils</groupId>
                  <artifactId>commons-beanutils</artifactId>
                  <version>1.4</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>commons</outputDirectory>
                  <destFileName>commons-beanutils-1.4.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <!-- TODO: not used anywhere -> remove -->
                  <groupId>commons-collections</groupId>
                  <artifactId>commons-collections</artifactId>
                  <version>2.0</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>commons</outputDirectory>
                  <destFileName>commons-collections-2.0.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <!-- TODO: used in module 'testing' -->
                  <groupId>commons-digester</groupId>
                  <artifactId>commons-digester</artifactId>
                  <version>1.3</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>commons</outputDirectory>
                  <destFileName>commons-digester-1.3.jar</destFileName>
                </artifactItem>
                <artifactItem>
                  <!-- Binary is identical to committed version -->
                  <!-- TODO: used in modules 'org.aspectj.matcher', 'testing'   -->
                  <groupId>commons-logging</groupId>
                  <artifactId>commons-logging</artifactId>
                  <version>1.0.1</version>
                  <type>jar</type>
                  <overWrite>false</overWrite>
                  <outputDirectory>commons</outputDirectory>
                  <destFileName>commons-logging-1.0.1.jar</destFileName>
                </artifactItem>

              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <profiles>

    <profile>
      <id>unzip-ant-binaries</id>
      <activation>
        <file>
          <!-- Only unzip if this file is missing in order to avoid doing it for each build -->
          <missing>ant/bin/ant.bat</missing>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>truezip-maven-plugin</artifactId>
            <version>1.2</version>
            <executions>
              <execution>
                <id>unzip-ant-binaries</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>ant/${lib.ant.artifact}-bin.zip/${lib.ant.artifact}</directory>
                    <outputDirectory>ant</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>zip-ant-sources</id>
      <activation>
        <file>
          <!-- Only create archive if this file is missing in order to avoid doing it for each build -->
          <missing>ant/ant-src.zip</missing>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>truezip-maven-plugin</artifactId>
            <version>1.2</version>
            <executions>
              <execution>
                <id>zip-ant-sources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>ant/${lib.ant.artifact}-src.zip/${lib.ant.artifact}/src/main</directory>
                    <outputDirectory>ant/ant-src.zip</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>zip-commons-binaries</id>
      <activation>
        <file>
          <!-- Only create archive if this file is missing in order to avoid doing it for each build -->
          <missing>commons/commons.jar</missing>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>truezip-maven-plugin</artifactId>
            <version>1.2</version>
            <executions>
              <execution>
                <id>zip-beanutils-binaries</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-beanutils-1.4.jar</directory>
                    <outputDirectory>commons/commons.jar</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
              <execution>
                <id>zip-collections-binaries</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-collections-2.0.jar</directory>
                    <outputDirectory>commons/commons.jar</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
              <execution>
                <id>zip-digester-binaries</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-digester-1.3.jar</directory>
                    <outputDirectory>commons/commons.jar</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
              <execution>
                <id>zip-logging-binaries</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-logging-1.0.1.jar</directory>
                    <outputDirectory>commons/commons.jar</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>zip-commons-sources</id>
      <activation>
        <file>
          <!-- Only create archive if this file is missing in order to avoid doing it for each build -->
          <missing>commons/commons-src.zip</missing>
        </file>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>truezip-maven-plugin</artifactId>
            <version>1.2</version>
            <executions>
              <execution>
                <id>zip-beanutils-sources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-beanutils-1.4-sources.jar/commons-beanutils-BEANUTILS_1_4/src/java</directory>
                    <outputDirectory>commons/commons-src.zip</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
              <execution>
                <id>zip-collections-sources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-collections-2.0-sources.jar/commons-collections-collections-2.0/src/java</directory>
                    <outputDirectory>commons/commons-src.zip</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
              <execution>
                <id>zip-digester-sources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-digester-1.3-sources.jar/commons-digester-DIGESTER_1_3/src/java</directory>
                    <outputDirectory>commons/commons-src.zip</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
              <execution>
                <id>zip-logging-sources</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>copy</goal>
                </goals>
                <configuration>
                  <verbose>true</verbose>
                  <fileset>
                    <!--
                      This is why we use the TrueZIP plugin: It can seamlessly copy out of or into ZIP files as if they
                      were normal file system paths. No additional moves and deletes with Antrun are necessary.
                    -->
                    <directory>commons/commons-logging-1.0.1-sources.jar/commons-logging-LOGGING_1_0_1/src/java</directory>
                    <outputDirectory>commons/commons-src.zip</outputDirectory>
                  </fileset>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      TODO:
        - Add profile 'clean-libs' to make Maven Clean delete downloads & unpacks (should be off by default in order
          not to waste time for re-downloading things like Ant after a simple 'mvn clean').
        - Add libx (for now, then finally lib) to .gitignore
    -->
  </profiles>

</project>
